See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (1 warning)
PMD:          FAILED (9 warnings)
Checkstyle:   FAILED (0 errors, 11 warnings)

Correctness:  11/36 tests passed
Memory:       4/4 tests passed
Timing:       27/27 tests passed

Aggregate score: 58.33%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 677 Sep 18 14:59 Outcast.java
1.9K Sep 18 14:59 SAP.java
2.2K Sep 18 14:59 WordNet.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac11 SAP.java
*-----------------------------------------------------------

% javac11 WordNet.java
*-----------------------------------------------------------

% javac11 Outcast.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D UP_UNUSED_PARAMETER UP: Static or private method SAP.calcBfs(Iterable, Iterable, boolean) has unused parameters  At SAP.java:[lines 40-60]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------
Outcast.java:3: The private instance (or static) variable 'wn' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Outcast.java:30: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
SAP.java:7: The private instance (or static) variable 'D' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
SAP.java:38: Avoid unused parameter variables, such as 'w'. [UnusedFormalParameter]
SAP.java:64: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
WordNet.java:10: The private instance (or static) variable 'nouns' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:11: The private instance (or static) variable 'ids' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:12: The private instance (or static) variable 'wn' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:71: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 9 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Outcast.java:5:20: '(' is preceded with whitespace. [MethodParamPad]
[WARN] Outcast.java:10:27: '(' is preceded with whitespace. [MethodParamPad]
[WARN] Outcast.java:30:5: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] Outcast.java:30:6: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] SAP.java:7:21: The instance variable 'D' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] SAP.java:64:5: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] SAP.java:64:6: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] WordNet.java:2:8: Unused import statement for 'java.util.LinkedList'. [UnusedImports]
[WARN] WordNet.java:4:8: Unused import statement for 'java.util.Queue'. [UnusedImports]
[WARN] WordNet.java:71:5: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] WordNet.java:71:6: '}' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 11 warning.

% custom checkstyle checks for SAP.java
*-----------------------------------------------------------

% custom checkstyle checks for WordNet.java
*-----------------------------------------------------------
[INFO] WordNet.java:1: The program uses neither 'DirectedCycle' nor 'Topological' to check whether the digraph is a DAG. [Design]

% custom checkstyle checks for Outcast.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of SAP
*-----------------------------------------------------------
Running 20 total tests.

Test 1: check length() and ancestor() on fixed digraphs
  * digraph1.txt
    - failed on trial 2 of 169
    - v = 2, w = 6
    - student   length() = 0
    - reference length() = -1

  * digraph2.txt
    - failed on trial 1 of 36
    - v = 1, w = 5
    - student   length() = 0
    - reference length() = 2

  * digraph3.txt
    - failed on trial 1 of 225
    - v = 10, w = 3
    - student   length() = 0
    - reference length() = -1

  * digraph4.txt
    - failed on trial 1 of 100
    - v = 0, w = 3
    - student   length() = 0
    - reference length() = 5

  * digraph5.txt
    - failed on trial 2 of 484
    - v = 5, w = 16
    - student   length() = 0
    - reference length() = -1

  * digraph6.txt
    - failed on trial 1 of 64
    - v = 4, w = 0
    - student   length() = 0
    - reference length() = 4

  * digraph9.txt
    - failed on trial 2 of 81
    - v = 4, w = 1
    - student   length() = 0
    - reference length() = 1

==> FAILED

Test 2: check length() and ancestor() on WordNet digraph
  * 100 random vertex pairs in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 19169, w = 50603
    - student   length() = 0
    - reference length() = 8

==> FAILED

Test 3: check length() and ancestor() on directed paths
  * 5
    - failed on trial 1 of 25
    - v = 1, w = 0
    - student   length() = 0
    - reference length() = 2

  * 10
    - failed on trial 1 of 100
    - v = 1, w = 2
    - student   length() = 0
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 7, w = 18
    - student   length() = 0
    - reference length() = 1

  * 50
    - failed on trial 1 of 2500
    - v = 28, w = 30
    - student   length() = 0
    - reference length() = 1

  * 100
    - failed on trial 1 of 10000
    - v = 78, w = 98
    - student   length() = 0
    - reference length() = 6

==> FAILED

Test 4: check length() and ancestor() on directed cycles
  * 5
    - failed on trial 1 of 25
    - v = 1, w = 3
    - student   length() = 0
    - reference length() = 1

  * 10
    - failed on trial 1 of 100
    - v = 0, w = 8
    - student   length() = 0
    - reference length() = 5

  * 20
    - failed on trial 2 of 400
    - v = 17, w = 15
    - student   length() = 0
    - reference length() = 5

  * 50
    - failed on trial 1 of 2500
    - v = 44, w = 36
    - student   length() = 0
    - reference length() = 21

  * 100
    - failed on trial 1 of 10000
    - v = 65, w = 17
    - student   length() = 0
    - reference length() = 2

==> FAILED

Test 5: check length() and ancestor() on complete graphs
  * 5
    - failed on trial 1 of 25
    - v = 2, w = 3
    - student   length() = 0
    - reference length() = 1

  * 10
    - failed on trial 1 of 100
    - v = 9, w = 2
    - student   length() = 0
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 14, w = 16
    - student   length() = 0
    - reference length() = 1

  * 50
    - failed on trial 1 of 2500
    - v = 45, w = 46
    - student   length() = 0
    - reference length() = 1

==> FAILED

Test 6: check length() and ancestor() on tournament digraphs
  * 5
    - failed on trial 1 of 25
    - v = 2, w = 4
    - student   length() = 0
    - reference length() = 1

  * 10
    - failed on trial 1 of 100
    - v = 3, w = 8
    - student   length() = 0
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 14, w = 10
    - student   length() = 0
    - reference length() = 1

  * 50
    - failed on trial 1 of 2500
    - v = 39, w = 12
    - student   length() = 0
    - reference length() = 1

==> FAILED

Test 7: check length() and ancestor() on complete binary trees
  * 5
    - failed on trial 1 of 25
    - v = 3, w = 0
    - student   length() = 0
    - reference length() = 1

  * 10
    - failed on trial 1 of 100
    - v = 9, w = 7
    - student   length() = 0
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 2, w = 16
    - student   length() = 0
    - reference length() = 2

  * 50
    - failed on trial 1 of 2500
    - v = 22, w = 0
    - student   length() = 0
    - reference length() = 2

  * 100
    - failed on trial 1 of 10000
    - v = 95, w = 90
    - student   length() = 0
    - reference length() = 7

==> FAILED

Test 8: check length() and ancestor() on random DAGs
  * 5 vertices, 8 edges
    - failed on trial 1 of 25
    - v = 0, w = 2
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 4, w = 2
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 8, w = 4
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 9: check length() and ancestor() on random rooted-in DAGs
  * 5 vertices, 8 edges
    - failed on trial 1 of 25
    - v = 3, w = 0
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 3, w = 8
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 0, w = 15
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 10: check length() and ancestor() on random rooted-out DAGs
  * 5 vertices, 8 edges
    - failed on trial 3 of 25
    - v = 0, w = 4
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 0, w = 6
    - student   length() = 0
    - reference length() = 2

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 11, w = 5
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 11: check length() and ancestor() on random rooted-in trees
  * 5 vertices
    - failed on trial 1 of 25
    - v = 0, w = 4
    - student   length() = 0
    - reference length() = 2

    - failed on trial 1 of 100

  * 10 vertices
    - failed on trial 3 of 100
    - v = 3, w = 0
    - student   length() = 0
    - reference length() = 3

    - failed on trial 1 of 100

  * 20 vertices
    - failed on trial 1 of 400
    - v = 14, w = 5
    - student   length() = 0
    - reference length() = 2

    - failed on trial 1 of 100

==> FAILED

Test 12: check length() and ancestor() on random rooted-out trees
  * 5 vertices
    - failed on trial 3 of 25
    - v = 3, w = 2
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices
    - failed on trial 1 of 100
    - v = 4, w = 6
    - student   length() = 0
    - reference length() = 3

    - failed on trial 1 of 100

  * 20 vertices
    - failed on trial 1 of 400
    - v = 10, w = 5
    - student   length() = 0
    - reference length() = -1

    - failed on trial 1 of 100

==> FAILED

Test 13: check length() and ancestor() on random simple digraphs
  * 5 vertices, 8 edges
    - failed on trial 1 of 25
    - v = 2, w = 4
    - student   length() = 0
    - reference length() = 2

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 2, w = 7
    - student   length() = 0
    - reference length() = 2

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 16, w = 3
    - student   length() = 0
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 14: check whether two SAP objects can be created at the same time
  * digraph1.txt and digraph2.txt
    - v = 0, w = 1
    - (digraph1.txt) student   length() = 0
    - (digraph1.txt) reference length() = 1

  * digraph3.txt and digraph4.txt
    - v = 0, w = 1
    - (digraph3.txt) student   length() = 0
    - (digraph3.txt) reference length() = -1

  * digraph5.txt and digraph6.txt
    - v = 0, w = 1
    - (digraph5.txt) student   length() = 0
    - (digraph5.txt) reference length() = -1

  * digraph2.txt and digraph1.txt
    - v = 0, w = 1
    - (digraph2.txt) student   length() = 0
    - (digraph2.txt) reference length() = 1

==> FAILED

Test 15: check whether SAP is immutable
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph-ambiguous-ancestor.txt
==> passed

Test 16: check length() and ancestor() with iterable arguments
  * 100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 79526 }
    - w = { 81061 }
    - student   length() = 0
    - reference length() = 12

  * 100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 42275 }
    - w = { 23886, 31503 }
    - student   length() = 0
    - reference length() = 16

  * 100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 61054, 70246 }
    - w = { 26958 }
    - student   length() = 0
    - reference length() = 13

  * 100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 46890, 71566 }
    - w = { 40726, 53595 }
    - student   length() = 0
    - reference length() = 9

  * 100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 41266, 47316, 75900 }
    - w = { 10426, 16696, 27679, 40713, 58535, 62212, 68542, 73954, 77020, 78852, 79713 }
    - student   length() = 0
    - reference length() = 7

  * 100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 6944, 13440, 15087, 19452, 31536, 35371, 38135, 49534, 49938, 58317, 77539 }
    - w = { 19436, 37695, 45349 }
    - student   length() = 0
    - reference length() = 11

==> FAILED

Test 17: check length() and ancestor() with zero-length iterable arguments
  * 100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
  * 100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 28313, 31662, 34211, 38263, 76546 }
    - w = { }
    - student   length() = 0
    - reference length() = -1

  * 100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
==> FAILED

Test 18: check length() and ancestor() with invalid arguments
  * G = digraph1.txt v = -1, w = 0
  * G = digraph1.txt v = 0, w = -1
  * G = digraph1.txt v = 13, w = 0
  * G = digraph1.txt v = 0, w = 13
==> passed

Test 19: check iterable versions of length() and ancestor() with invalid arguments
  * G = digraph1.txt, v = { 0, 3, 4, 6, 11 }, w = null
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = null, w = { 1, 5, 7, 9, 12 }
  * G = digraph1.txt, v = null, w = null
  * G = digraph1.txt, v = { 0, -1, 3, 4, 6, 11 }, w = { 1, 5, 7, 9, 12 }
  * G = digraph1.txt, v = { 0, 3, 4, 6, 11 }, w = { 1, -1, 5, 7, 9, 12 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 0, 3, 13, 4, 6, 11 }, w = { 1, 5, 7, 9, 12 }
  * G = digraph1.txt, v = { 0, 3, 4, 6, 11 }, w = { 1, 5, 7, 9, 13, 12 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 0, 3, 4, null, 6, 11 }, w = { 1, 5, 7, 9, 12 }
    - throws the wrong exception when calling length() with invalid argument
    - length() throws a java.lang.NullPointerException
    - length() should throw a java.lang.IllegalArgumentException

    - throws the wrong exception when calling ancestor() with invalid argument
    - ancestor() throws a java.lang.NullPointerException
    - ancestor() should throw a java.lang.IllegalArgumentException

  * G = digraph1.txt, v = { 0, 3, 4, 6, 11 }, w = { 1, 5, 7, 9, 12, null }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

==> FAILED

Test 20: random calls to both version of length() and ancestor(),
         with probabilities p1 and p2, respectively
  * random calls in a random rooted DAG (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - no path from v or w to ancestor
    - failed on call 1 to ancestor()
    - v = 5, w = 13
    - reference length   = 2
    - student   ancestor = 5
    - reference ancestor = 13

  * random calls in a random digraph (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - failed on call 1 to length()
    - v                  = 5
    - w                  = 18
    - student   length() = 0
    - reference length() = 1

==> FAILED


Total: 2/20 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP)
********************************************************************************

Testing correctness of WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on pair 1 of 1000
    - nounA = dust
    - nounB = Saint_Cloud
    - student   distance() = 13
    - reference distance() = 12

==> FAILED

Test 2: check distance() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
==> passed

Test 3: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
    - failed on pair 204 of 1000
    - nounA = horror
    - nounB = thing
    - student   distance() = 4
    - reference distance() = 1

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - failed on pair 3 of 1000
    - nounA = whopper
    - nounB = oil
    - student   distance() = 11
    - reference distance() = 9

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - failed on pair 107 of 1000
    - nounA = safflower_oil
    - nounB = saphenous_vein
    - student   distance() = 16
    - reference distance() = 14

==> FAILED

Test 4: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - student sap() is too far to be a valid common ancestor when testing pair 33 of 1000
    - nounA = touch_football
    - nounB = uplift
    - student   sap() = 'entity'
    - reference sap() = 'event'
    - student   distance() = 20
    - reference distance() to 'event' = 13
    - actual distance to 'entity' = 19

==> FAILED

Test 5: check sap() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
==> passed

Test 6: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - student sap() is too far to be a valid common ancestor when testing pair 629 of 1000
    - nounA = beef_tallow
    - nounB = oil
    - student   sap() = 'lipid lipide lipoid'
    - reference sap() = 'oil'
    - student   distance() = 7
    - reference distance() to 'oil' = 3
    - actual distance to 'lipid lipide lipoid' = 5

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - student sap() is too far to be a valid common ancestor when testing pair 186 of 1000
    - nounA = mesothelium
    - nounB = tract
    - student   sap() = 'body_part'
    - reference sap() = 'animal_tissue'
    - student   distance() = 6
    - reference distance() to 'animal_tissue' = 5

==> FAILED

Test 7: check whether WordNet is immutable
  * synsets = synsets.txt; hypernyms = hypernyms.txt
==> passed

Test 8: check constructor when input is not a rooted DAG
  * synsets3.txt, hypernyms3InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets3.txt, hypernyms3InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle+Path.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 9: check isNoun()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> passed

Test 10: check nouns()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> passed

Test 11: check whether two WordNet objects can be created at the same time
  * synsets1 = synsets15.txt; hypernyms1 = hypernyms15Tree.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
  * synsets1 = synsets.txt; hypernyms1 = hypernyms.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
==> passed

Test 12: call distance() and sap() with invalid arguments
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "b"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "b", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "a", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "x"
==> passed

Test 13: call isNoun() with a null argument
  * synsets15.txt, hypernyms15Path.txt
    - isNoun(null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 14: random calls to isNoun(), distance(), and sap(), with
         probabilities p1, p2, and p3, respectively
  * 100 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0)
    - failed on call 2 to distance()
    - nounA = ganja
    - nounB = redneck
    - student   distance() = 10
    - reference distance() = 8

  * 100 random calls (p1 = 0.5, p2 = 0.0, p3 = 0.5)
    - student sap() is too far to be a valid common ancestor when testing pair 9 of 100
    - nounA = Valencia_orange
    - nounB = emanation
    - student   sap() = 'entity'
    - reference sap() = 'matter'
    - student   distance() = 16
    - reference distance() to 'matter' = 9
    - actual distance to 'entity' = 13

    - failed on call 9 to sap()
  * 100 random calls (p1 = 0.0, p2 = 0.5, p3 = 0.5)
    - student sap() is too far to be a valid common ancestor when testing pair 3 of 100
    - nounA = obeisance
    - nounB = declassification
    - student   sap() = 'act deed human_action human_activity'
    - reference sap() = 'action'
    - student   distance() = 8
    - reference distance() to 'action' = 6

    - failed on call 3 to sap()
  * 100 random calls (p1 = 0.2, p2 = 0.4, p3 = 0.4)
    - failed on call 18 to distance()
    - nounA = choice
    - nounB = Miranda_rule
    - student   distance() = 11
    - reference distance() = 10

==> FAILED


Total: 7/14 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP and WordNet)
********************************************************************************

Testing correctness of Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check outcast() on WordNet digraph
        (synsets.txt and hypernyms.txt)
  * outcast2.txt
  * outcast3.txt
  * outcast4.txt
  * outcast5.txt
  * outcast5a.txt
  * outcast7.txt
  * outcast8.txt
  * outcast8a.txt
  * outcast8b.txt
  * outcast8c.txt
  * outcast9.txt
  * outcast9a.txt
  * outcast10.txt
  * outcast10a.txt
  * outcast11.txt
  * outcast12.txt
  * outcast12a.txt
  * outcast17.txt
  * outcast20.txt
  * outcast29.txt
==> passed

Test 2: check outcast() on WordNet subgraph
        (synsets50000-subgraph.txt and hypernyms50000-subgraph.txt)
  * outcast2.txt
  * outcast3.txt
  * outcast5.txt
  * outcast5a.txt
  * outcast7.txt
  * outcast8.txt
  * outcast8b.txt
  * outcast8c.txt
  * outcast9.txt
  * outcast10.txt
  * outcast11.txt
==> passed


Total: 2/2 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

digraph G             = digraph-wordnet.txt
vertices in G         = 82192
edges    in G         = 84505
student     memory    = 8347968 bytes
reference   memory    = 10320408 bytes
ratio                 = 0.81
maximum allowed ratio = 2.50

Total: 1/1 tests passed!


================================================================



Analyzing memory of WordNet
*-----------------------------------------------------------
Running 3 total tests.

Test 1a: check memory of WordNet object
  * synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - number of vertices in digraph = 1000
    - number of edges    in digraph = 1008
    - student   memory              = 521200 bytes
    - reference memory              = 1441648 bytes
    - student / reference ratio     = 0.4
    - maximum allowed rato          = 2.0

==> passed

Test 1b: check memory of WordNet object
  * synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
    - number of vertices in digraph = 5000
    - number of edges    in digraph = 5059
    - student   memory              = 2539752 bytes
    - reference memory              = 7042616 bytes
    - student / reference ratio     = 0.4
    - maximum allowed rato          = 2.0

==> passed

Test 1c: check memory of WordNet object
  * synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
    - number of vertices in digraph = 10000
    - number of edges    in digraph = 10087
    - student   memory              = 5977240 bytes
    - reference memory              = 16172512 bytes
    - student / reference ratio     = 0.4
    - maximum allowed rato          = 2.0

==> passed

Total: 3/3 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 14 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
      -  student solution time =  0.02 seconds
      -  maximum allowed  time =  1.00 seconds
==> passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  654031.00
     -  student   solution calls per second:    1287.00
     -  reference / student ratio:               508.18

=> passed      student <= 50000x reference
=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference

Test 3a-c: time length() and ancestor() with random subsets of 5 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  188564.00
     -  student   solution calls per second:    1111.00
     -  reference / student ratio:               169.72

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference

Test 4a-c: time length() and ancestor() with random subsets of 100 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:   12197.00
     -  student   solution calls per second:    1281.00
     -  reference / student ratio:                 9.52

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference

Test 5: Time 10 calls to length() and ancestor() on random path graphs
        (must handle V = 65536 in under 2 seconds)

             V  seconds
        ---------------
         32768     0.13
         65536     0.42
==> passed


Total: 14/14 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP)
********************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 11 total tests.

Test 1: check that exactly two In object created
        (one for synsets file and one for hypernyms file)
==> passed

Test 2: count number of SAP operations when constructing a WordNet object
        and calling distance() and sap() three times each
  * calls to constructor = 1
  * calls to length()    = 3
  * calls to ancestor()  = 6

==> passed

Test 3: count Digraph operations during WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * number of synsets    = 82192
  * number of hypernyms  = 84505
  * calls to constructor = 2
  * calls to addEdge()   = 84505
  * calls to adj()       = 0
  * calls to outdegree() = 0
  * calls to indegree()  = 0
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> passed

Test 4: count Digraph operations during 1000 calls each
        to distance() and sap()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * calls to constructor = 0
  * calls to addEdge()   = 0
  * calls to adj()       = 41896
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> passed

Test 5: time WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - student constructor time =  0.42 seconds
    - maximum allowed     time = 10.00 seconds

==> passed

Test 6a-e: time sap() and distance() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  213943.75
    - student   solution calls per second:  235971.00
    - reference / student ratio:                 0.91

=> passed    student <= 10000x reference
=> passed    student <=  1000x reference
=> passed    student <=   100x reference
=> passed    student <=    10x reference
=> passed    student <=     5x reference

Test 7: time isNoun() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second: 1051684.00
    - student   solution calls per second:  814420.00
    - reference / student ratio:                 1.29
    - allowed ratio:                             4.00
==> passed

Total: 11/11 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP and WordNet)
********************************************************************************

Timing Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: count calls to methods in WordNet
 * outcast4.txt
 * outcast10.txt
 * outcast29.txt
==> passed

Test 2: timing calls to outcast() for various outcast files

Total time must not exceed 1.0 seconds.

    filename       n     time
-----------------------------
   outcast4.txt    4     0.00
   outcast5.txt    5     0.00
  outcast5a.txt    5     0.00
   outcast5.txt    5     0.00
   outcast7.txt    7     0.00
   outcast8.txt    8     0.00
  outcast8a.txt    8     0.00
  outcast8b.txt    8     0.00
  outcast8c.txt    8     0.00
   outcast9.txt    9     0.00
  outcast9a.txt    9     0.00
  outcast10.txt   10     0.00
 outcast10a.txt   10     0.00
  outcast11.txt   11     0.00
  outcast12.txt   12     0.00
 outcast12a.txt   12     0.00
  outcast20.txt   20     0.00
  outcast29.txt   29     0.01

Total elapsed time: 0.02 seconds

==> passed


Total: 2/2 tests passed!


================================================================
